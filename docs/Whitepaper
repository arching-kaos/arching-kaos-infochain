Arching Kaos Infochain Whitepaper
=================================

The following is a document on how the Arching Kaos Infochain is constructed and on how is analyzed.

1. What do we want to achieve?
------------------------------

With AKI we are storing "permantly" metadata on a series of transactions, within the ARCHINGKAOS asset on 
Stellar Network.

2. How do we do that?
---------------------

We make use of IPFS to store information in a way that we can retrieve them and validate them, serialize 
them and present them.

IPFS is creating a CID for each file or folder is added to its repository. Furthermore, while connected 
to any network with other instances of IPFS running, the same information can be retrieved using the same 
CID.

We want to be descriptive on what we want to do, while we maintain a series or chain of information.

3. Transaction > ZBLOCK > BLOCK > DATA
--------------------------------------

3.1 Transaction
---------------
Each Transaction (TX) is containing the IPFS CID of a ZBLOCK.

It consists of 5 transactions on ARCHINGKAOS asset on the price of 0.2ARCHINGKAOS each.

3.2 ZBLOCK
----------

ZBLOCK consists of a BLOCK and its detached signature in JSON format.

3.3 BLOCK
---------

A BLOCK contains action, data, detach signature of data, previous CID and public GPG key of the publisher.

3.4 DATA
--------

DATA should be the place to be creative.

It's rendered based on the action that is mentioned in the BLOCK.


4. Example
----------

Let's say we want to add a mixtape:

action should be: mixtape/add

MIXTAPE

MIXTAPE should find how many mixtapes have been add-ed by reading all the mixtape/add messages.

It should also validate that the DATA of the BLOCK is good to use.

5. Ownership
------------

There is no direct ownership, the database that is created in this system can be attached to the 
transaction sender or the GPG key of them. However, the correct word is "contributor". The contributor is 
the Stellar address, packed with the GPG key.

6. Rendering
------------

Whoever can decode the messages, can select to create a specific decoder adding new ACTIONs and 
appropriate verifiers for the DATA assumed to be valid.

They can then represend the decoded data, to gateways featuring APIs or UIs.
